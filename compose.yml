services:
  # gateway still required
  # application services
  data-api:
    image: defradigital/trade-imports-data-api:${TRADE_IMPORTS_DATA_API:-latest}
    pull_policy: always
    depends_on:
      mongodb:
        condition: service_healthy
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      Mongo__DatabaseUri: mongodb://mongodb:27017/?directConnection=true
      Acl__Clients__Developer__Secret: developer-pwd
      Acl__Clients__TradeImportsProcessor__Secret: processor-pwd
      Acl__Clients__TradeImportsDecisionDeriver__Secret: deriver-pwd
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  processor:
    image: defradigital/trade-imports-processor:${TRADE_IMPORTS_PROCESSOR:-latest}
    pull_policy: always
    depends_on:
      asb:
        condition: service_healthy
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      ServiceBus__Notifications__ConnectionString: "Endpoint=sb://asb-backend;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true"
      ServiceBus__Gmrs__ConnectionString: "Endpoint=sb://asb-backend;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true"
      DataApi__BaseAddress: "http://data-api:8080"
      DataApi__Password: processor-pwd
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  decision-deriver:
    image: defradigital/trade-imports-decision-deriver:${TRADE_IMPORTS_DECISION_DERIVER:-latest}
    pull_policy: always
    depends_on:
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      DataApi__BaseAddress: "http://data-api:8080"
      DataApi__Password: deriver-pwd
    ports:
      - "8083:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  decision-comparer:
    image: defradigital/trade-imports-decision-comparer:${TRADE_IMPORTS_DECISION_COMPARER:-latest}
    pull_policy: always
    depends_on:
      mongodb:
        condition: service_healthy
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      Mongo__DatabaseUri: mongodb://mongodb:27017/?directConnection=true
      Acl__Clients__Developer__Secret: developer-pwd
    ports:
      - "8084:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  # application dependencies
  asb-backend:
    environment:
      SQL_WAIT_INTERVAL: 0
      SQL_SERVER: sqledge
      MSSQL_SA_PASSWORD: "s4usag3s!"
      ACCEPT_EULA: "Y"
    depends_on:
      sqledge:
        condition: service_healthy
    image: mcr.microsoft.com/azure-messaging/servicebus-emulator:latest
    ports:
      - "5672:5672"
      - "5300:5300"
    pull_policy: always
    volumes:
      - "./compose/asb.json:/ServiceBus_Emulator/ConfigFiles/Config.json"

  asb:
    image: alpine/curl:latest
    depends_on:
      asb-backend:
        condition: service_started
    command: ["tail", "-f", "/dev/null"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://asb-backend:5300/health"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

  sqledge:
    healthcheck:
      interval: 5s
      retries: 10
      start_period: 5s
      test: timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/1433'
      timeout: 5s
    image: mcr.microsoft.com/azure-sql-edge:latest
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "s4usag3s!"

  localstack:
    image: localstack/localstack
    ports:
      - '4566:4566'
      - '4510-4559:4510-4559'
    env_file:
      - 'compose/aws.env'
    environment:
      DEBUG: ${DEBUG:-1}
      LS_LOG: info
      SERVICES: sqs,sns
      LOCALSTACK_HOST: 127.0.0.1
      TZ: Europe/London
    volumes:
      - '${TMPDIR:-/tmp}/localstack:/var/lib/localstack'
      - ./compose/start-localstack.sh:/etc/localstack/init/ready.d/start-localstack.sh
    healthcheck:
      test: cat /tmp/ready
      interval: 5s
      start_period: 5s
      retries: 10

  mongodb:
    # Initialise a Mongo cluster with a replicaset of 1 node.
    # Based on https://medium.com/workleap/the-only-local-mongodb-replica-set-with-docker-compose-guide-youll-ever-need-2f0b74dd8384
    # Since we are using transactions, we require a replicaset. Local dev with docker compose uses 1 node below, but our live
    # environments have multiple nodes.
    # The replicaset needs initialising, so the healthcheck can be hijacked to initialise this so that it can keep retrying
    # until the operation is successful (might need to wait a while after container boot for this to work, hence the interval/retries)
    # WARNING: do not turn on authentication, otherwise will need to deal with generating key pairs and sharing them between
    # the replicaset nodes. For local development this is overkill, so just turn off auth and connect to Mongo without creds.
    image: mongo:6.0.13
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongodb-data:/data
    restart: always

volumes:
  mongodb-data:
