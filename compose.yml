services:
  # application services
  btms-gateway:
    image: defradigital/btms-gateway:${BTMS_GATEWAY:-latest}
    pull_policy: always
    depends_on:
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      Routing__AutomatedHealthCheckDisabled: false
      HealthCheck__AutomatedHealthCheckDisabled: false
      Routing__Destinations__AlvsDecisionComparer__Link: http://decision-comparer:8080
      Routing__Destinations__BtmsDecisionComparer__Link: http://decision-comparer:8080
      DataApi__BaseAddress: http://data-api:8080
      DataApi__Password: gateway-pwd
      DecisionComparerApi__BaseAddress: http://decision-comparer:8080
      DecisionComparerApi__Password: gateway-pwd
      # alvs decision routing to comparer
      Routing__NamedRoutes__ALVSDecisionNotificationToCds__LegacyLinkName: None
      Routing__NamedRoutes__ALVSDecisionNotificationToCds__BtmsLinkName: DecisionComparer
      Routing__NamedRoutes__ALVSDecisionNotificationToCds__RouteTo: Btms
      # clearance request write to topic
      Routing__NamedRoutes__CDSClearanceRequestToAlvs__LegacyLinkName: None
      Routing__NamedRoutes__CDSClearanceRequestToAlvs__BtmsLinkName: InboundCustomsDeclarationReceivedTopic
      Routing__NamedRoutes__CDSClearanceRequestToAlvs__RouteTo: Btms
      # finalisation write to topic
      Routing__NamedRoutes__CDSFinalisationNotificationToAlvs__LegacyLinkName: None
      Routing__NamedRoutes__CDSFinalisationNotificationToAlvs__BtmsLinkName: InboundCustomsDeclarationReceivedTopic
      Routing__NamedRoutes__CDSFinalisationNotificationToAlvs__RouteTo: Btms
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks: [btms]

  data-api:
    image: defradigital/trade-imports-data-api:${TRADE_IMPORTS_DATA_API:-latest}
    pull_policy: always
    depends_on:
      mongodb:
        condition: service_healthy
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      Mongo__DatabaseUri: mongodb://mongodb:27017/?directConnection=true
      Acl__Clients__Developer__Secret: developer-pwd
      Acl__Clients__TradeImportsProcessor__Secret: processor-pwd
      Acl__Clients__TradeImportsDecisionDeriver__Secret: deriver-pwd
      Acl__Clients__BtmsGateway__Secret: gateway-pwd
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks: [btms]

  processor:
    image: defradigital/trade-imports-processor:${TRADE_IMPORTS_PROCESSOR:-latest}
    pull_policy: always
    depends_on:
      asb:
        condition: service_healthy
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      ServiceBus__Notifications__ConnectionString: "Endpoint=sb://asb-backend;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true"
      ServiceBus__Gmrs__ConnectionString: "Endpoint=sb://asb-backend;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=SAS_KEY_VALUE;UseDevelopmentEmulator=true"
      DataApi__BaseAddress: "http://data-api:8080"
      DataApi__Password: processor-pwd
    ports:
      - "8082:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks: [btms]

  decision-deriver:
    image: defradigital/trade-imports-decision-deriver:${TRADE_IMPORTS_DECISION_DERIVER:-latest}
    pull_policy: always
    depends_on:
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      DataApi__BaseAddress: "http://data-api:8080"
      DataApi__Password: deriver-pwd
    ports:
      - "8083:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks: [btms]

  decision-comparer:
    image: defradigital/trade-imports-decision-comparer:${TRADE_IMPORTS_DECISION_COMPARER:-latest}
    pull_policy: always
    depends_on:
      mongodb:
        condition: service_healthy
      localstack:
        condition: service_healthy
    env_file:
      - 'compose/aws.env'
      - 'compose/dotnet-service.env'
    environment:
      Mongo__DatabaseUri: mongodb://mongodb:27017/?directConnection=true
      Acl__Clients__Developer__Secret: developer-pwd
      Acl__Clients__BtmsGateway__Secret: gateway-pwd
    ports:
      - "8084:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/all"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks: [btms]

  btms-portal-frontend:
    image: defradigital/btms-portal-frontend:${BTMS_PORTAL_FRONTEND:-latest}
    ports:
      - "3000:3000"
      - "9229:9229"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      localstack:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - compose/aws.env
    environment:
      PORT: 3000
      NODE_ENV: development
      REDIS_HOST: localhost
      LOCALSTACK_ENDPOINT: http://localhost:4566
      USE_SINGLE_INSTANCE_CACHE: true
      AUTH_DEFRA_ID_OIDC_CONFIGURATION_URL: http://cdp-defra-id-stub.localhost:3200/cdp-defra-id-stub/.well-known/openid-configuration
      BTMS_API_BASE_URL: http://data-api:8080
      BTMS_API_USERNAME: Developer
      BTMS_API_PASSWORD: developer-pwd
      APP_BASE_URL: http://localhost:3000
      AUTH_DEFRA_ID_SERVICE_ID: d7d72b79-9c62-ee11-8df0-000d3adf7047
      AUTH_ENTRA_ID_SCOPES: openid,profile,email,offline_access
      AUTH_ENTRA_ID_CLIENT_ID: 2fb0d715-affa-4bf1-836e-44a464e3fbea
      AUTH_ENTRA_ID_CLIENT_SECRET: xEP7L~abzXpEBAJ1yavbfdEcdlvlopLByVNvSbnf
      AUTH_DEFRA_ID_ORGANISATIONS: e852b6d3-5f5e-4b90-9932-c2e2350d1099
      AUTH_DEFRA_ID_CLIENT_SECRET: test_value
    networks: [btms]

  # application dependencies
  cdp-defra-id-stub:
    image: defradigital/cdp-defra-id-stub:${CDP_DEFRA_ID_STUB:-latest}
    ports:
      - "3200:3200"
    depends_on:
      localstack:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - compose/aws.env
    environment:
      PORT: 3200
      NODE_ENV: development
      REDIS_HOST: redis
      USE_SINGLE_INSTANCE_CACHE: true
      ISSUER: http://cdp-defra-id-stub.localhost:3200
      APP_BASE_URL: http://cdp-defra-id-stub.localhost:3200
    networks:
      btms: 
        aliases:
          - cdp-defra-id-stub.localhost
  asb-backend:
    environment:
      SQL_WAIT_INTERVAL: 0
      SQL_SERVER: sqledge
      MSSQL_SA_PASSWORD: "s4usag3s!"
      ACCEPT_EULA: "Y"
    depends_on:
      sqledge:
        condition: service_healthy
    image: mcr.microsoft.com/azure-messaging/servicebus-emulator:latest
    ports:
      - "5672:5672"
      - "5300:5300"
    pull_policy: always
    volumes:
      - "./compose/asb.json:/ServiceBus_Emulator/ConfigFiles/Config.json"
    networks: [btms]

  asb:
    image: alpine/curl:latest
    depends_on:
      asb-backend:
        condition: service_started
    command: ["tail", "-f", "/dev/null"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://asb-backend:5300/health"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks: [btms]

  sqledge:
    healthcheck:
      interval: 5s
      retries: 10
      start_period: 5s
      test: timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/1433'
      timeout: 5s
    image: mcr.microsoft.com/azure-sql-edge:latest
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "s4usag3s!"
    networks: [btms]

  localstack:
    image: localstack/localstack
    ports:
      - '4566:4566'
      - '4510-4559:4510-4559'
    env_file:
      - 'compose/aws.env'
    environment:
      DEBUG: ${DEBUG:-1}
      LS_LOG: info
      SERVICES: sqs,sns
      LOCALSTACK_HOST: 127.0.0.1
      TZ: Europe/London
    volumes:
      - '${TMPDIR:-/tmp}/localstack:/var/lib/localstack'
      - ./compose/start-localstack.sh:/etc/localstack/init/ready.d/start-localstack.sh
    healthcheck:
      test: cat /tmp/ready
      interval: 5s
      start_period: 5s
      retries: 10
    networks: [btms]

  mongodb:
    # Initialise a Mongo cluster with a replicaset of 1 node.
    # Based on https://medium.com/workleap/the-only-local-mongodb-replica-set-with-docker-compose-guide-youll-ever-need-2f0b74dd8384
    # Since we are using transactions, we require a replicaset. Local dev with docker compose uses 1 node below, but our live
    # environments have multiple nodes.
    # The replicaset needs initialising, so the healthcheck can be hijacked to initialise this so that it can keep retrying
    # until the operation is successful (might need to wait a while after container boot for this to work, hence the interval/retries)
    # WARNING: do not turn on authentication, otherwise will need to deal with generating key pairs and sharing them between
    # the replicaset nodes. For local development this is overkill, so just turn off auth and connect to Mongo without creds.
    image: mongo:6.0.13
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - "27017:27017"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongodb-data:/data
    restart: always
    networks: [btms]
  

  redis:
    image: redis:7.2.3-alpine3.18
    ports:
      - '6379:6379'
    restart: always
    networks: [btms]

volumes:
  mongodb-data:

networks:
  btms:
    driver: bridge
